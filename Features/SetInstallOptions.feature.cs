// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DAX2.DTT.Convertion.Test.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Set Install Options")]
    public partial class SetInstallOptionsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SetInstallOptions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Set Install Options", "\tAs a profession tuner for Windows platform\r\n\tI want to be able to set install op" +
                    "tions while I am importing tuning data to database\r\n\tSo I can customize the inta" +
                    "llation options for DAX2 App", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Default install options")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void DefaultInstallOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Default install options", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
    testRunner.When("I convert the tuning file Tuning_File_Device_Info.xml to the database DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range",
                        "install_options"});
            table1.AddRow(new string[] {
                        "hdac",
                        "0",
                        "0",
                        "100",
                        "DesktopIcon=1,TrayIcon=1,HelpImprove=2,ToastNotification=1"});
#line 11
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check desktop icon only")]
        public virtual void CheckDesktopIconOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check desktop icon only", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
 testRunner.When("I check Desktop Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.And("I uncheck Tray Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And("I uncheck Toast Notification in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
    testRunner.When("I convert the tuning file Tuning_File_Device_Info.xml to the database DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range",
                        "install_options"});
            table2.AddRow(new string[] {
                        "hdac",
                        "0",
                        "0",
                        "100",
                        "DesktopIcon=1,TrayIcon=0,HelpImprove=2,ToastNotification=0"});
#line 22
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check tray icon only")]
        public virtual void CheckTrayIconOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check tray icon only", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.When("I check Tray Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.And("I uncheck Desktop Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("I uncheck Toast Notification in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
    testRunner.When("I convert the tuning file Tuning_File_Device_Info.xml to the database DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range",
                        "install_options"});
            table3.AddRow(new string[] {
                        "hdac",
                        "0",
                        "0",
                        "100",
                        "DesktopIcon=0,TrayIcon=1,HelpImprove=2,ToastNotification=0"});
#line 33
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check toast notification only")]
        public virtual void CheckToastNotificationOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check toast notification only", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.When("I uncheck Tray Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.And("I uncheck Desktop Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("I check Toast Notification in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
    testRunner.When("I convert the tuning file Tuning_File_Device_Info.xml to the database DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range",
                        "install_options"});
            table4.AddRow(new string[] {
                        "hdac",
                        "0",
                        "0",
                        "100",
                        "DesktopIcon=0,TrayIcon=0,HelpImprove=2,ToastNotification=1"});
#line 44
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check tray icon & desktop icon")]
        public virtual void CheckTrayIconDesktopIcon()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check tray icon & desktop icon", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
 testRunner.When("I check Tray Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.And("I check Desktop Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.And("I uncheck Toast Notification in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
    testRunner.When("I convert the tuning file Tuning_File_Device_Info.xml to the database DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range",
                        "install_options"});
            table5.AddRow(new string[] {
                        "hdac",
                        "0",
                        "0",
                        "100",
                        "DesktopIcon=1,TrayIcon=1,HelpImprove=2,ToastNotification=0"});
#line 55
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check tray icon and toast notification")]
        public virtual void CheckTrayIconAndToastNotification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check tray icon and toast notification", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.When("I check Tray Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.And("I uncheck Desktop Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("I check Toast Notification in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
    testRunner.When("I convert the tuning file Tuning_File_Device_Info.xml to the database DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 65
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range",
                        "install_options"});
            table6.AddRow(new string[] {
                        "hdac",
                        "0",
                        "0",
                        "100",
                        "DesktopIcon=0,TrayIcon=1,HelpImprove=2,ToastNotification=1"});
#line 66
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check desktop icon and toast notification")]
        public virtual void CheckDesktopIconAndToastNotification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check desktop icon and toast notification", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
 testRunner.When("I uncheck Tray Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
 testRunner.And("I check Desktop Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.And("I check Toast Notification in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
    testRunner.When("I convert the tuning file Tuning_File_Device_Info.xml to the database DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range",
                        "install_options"});
            table7.AddRow(new string[] {
                        "hdac",
                        "0",
                        "0",
                        "100",
                        "DesktopIcon=1,TrayIcon=0,HelpImprove=2,ToastNotification=1"});
#line 77
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Select UX improvement to Yes")]
        public virtual void SelectUXImprovementToYes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select UX improvement to Yes", ((string[])(null)));
#line 81
this.ScenarioSetup(scenarioInfo);
#line 82
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
 testRunner.When("I uncheck Tray Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.And("I uncheck Desktop Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.And("I uncheck Toast Notification in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.And("I set UX Improvement to Yes in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
    testRunner.When("I convert the tuning file Tuning_File_Device_Info.xml to the database DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range",
                        "install_options"});
            table8.AddRow(new string[] {
                        "hdac",
                        "0",
                        "0",
                        "100",
                        "DesktopIcon=0,TrayIcon=0,HelpImprove=1,ToastNotification=0"});
#line 89
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Select UX improvement to No")]
        public virtual void SelectUXImprovementToNo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select UX improvement to No", ((string[])(null)));
#line 93
this.ScenarioSetup(scenarioInfo);
#line 94
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 95
 testRunner.When("I uncheck Tray Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 96
 testRunner.And("I uncheck Desktop Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And("I uncheck Toast Notification in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.And("I set UX Improvement to No in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
    testRunner.When("I convert the tuning file Tuning_File_Device_Info.xml to the database DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 100
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range",
                        "install_options"});
            table9.AddRow(new string[] {
                        "hdac",
                        "0",
                        "0",
                        "100",
                        "DesktopIcon=0,TrayIcon=0,HelpImprove=0,ToastNotification=0"});
#line 101
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Select UX improvement to User choose")]
        public virtual void SelectUXImprovementToUserChoose()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select UX improvement to User choose", ((string[])(null)));
#line 105
this.ScenarioSetup(scenarioInfo);
#line 106
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
 testRunner.When("I uncheck Tray Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.And("I uncheck Desktop Icon in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
 testRunner.And("I uncheck Toast Notification in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
 testRunner.And("I set UX Improvement to User Choose in install options section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
    testRunner.When("I convert the tuning file Tuning_File_Device_Info.xml to the database DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 112
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range",
                        "install_options"});
            table10.AddRow(new string[] {
                        "hdac",
                        "0",
                        "0",
                        "100",
                        "DesktopIcon=0,TrayIcon=0,HelpImprove=2,ToastNotification=0"});
#line 113
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
