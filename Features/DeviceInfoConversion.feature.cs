// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DAX2.DTT.Convertion.Test.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Device info convertion")]
    public partial class DeviceInfoConvertionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DeviceInfoConversion.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Device info convertion", "\tAs a profession tuner for Windows platform\r\n\tI want to be able to import device " +
                    "information being tuned to DAX2 Database\r\n\tSo I can convert all device tuning da" +
                    "ta in one unique DAX2 Database", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retrieving default device info")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void RetrievingDefaultDeviceInfo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieving default device info", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have the default DAX2 Database named DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Device_ID",
                        "System_ID",
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range",
                        "install_options"});
            table1.AddRow(new string[] {
                        "1",
                        "default_hdac",
                        "hdac",
                        "0",
                        "0",
                        "192",
                        ""});
            table1.AddRow(new string[] {
                        "2",
                        "default_hdac_core",
                        "hdac_core",
                        "0",
                        "0",
                        "192",
                        ""});
            table1.AddRow(new string[] {
                        "3",
                        "default_dsp",
                        "dsp",
                        "0",
                        "0",
                        "192",
                        ""});
#line 9
 testRunner.Then("I should be able to query below 3 default records in the table Device_Info of the" +
                    " DAX2 DB", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Import device info with the configurable GEQ node to DB")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void ImportDeviceInfoWithTheConfigurableGEQNodeToDB()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import device info with the configurable GEQ node to DB", new string[] {
                        "mytag"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.When("I set the DB file to DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.And("I set the XML file to Tuning_File_Device_Info.xml", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.When("I click on the convert button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.And("I press OK button on the message box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range"});
            table2.AddRow(new string[] {
                        "hdac",
                        "0",
                        "0",
                        "100"});
#line 23
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Import device info without the configurable GEQ node to DB")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void ImportDeviceInfoWithoutTheConfigurableGEQNodeToDB()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import device info without the configurable GEQ node to DB", new string[] {
                        "mytag"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.When("I set the DB file to DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.And("I set the XML file to Tuning_File_Device_Info_Without_GEQ_Nodes.xml", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.When("I click on the convert button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.And("I press OK button on the message box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range"});
            table3.AddRow(new string[] {
                        "hdac",
                        "0",
                        "0",
                        "192"});
#line 35
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update Operator info from the GUI")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void UpdateOperatorInfoFromTheGUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Operator info from the GUI", new string[] {
                        "mytag"});
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
 testRunner.When("I set the DB file to DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.And("I set the XML file to Tuning_File_Device_Info_Without_GEQ_Nodes.xml", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.When("I set the operator to Lenovo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.And("I click on the convert button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("I press OK button on the message box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range"});
            table4.AddRow(new string[] {
                        "hdac",
                        "1",
                        "0",
                        "192"});
#line 48
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update profile info from the GUI")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void UpdateProfileInfoFromTheGUI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update profile info from the GUI", new string[] {
                        "mytag"});
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
 testRunner.When("I set the DB file to DAX2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
 testRunner.And("I set the XML file to Tuning_File_Device_Info_Without_GEQ_Nodes.xml", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
 testRunner.And("I set default profile to Voice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.When("I click on the convert button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.And("I press OK button on the message box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range"});
            table5.AddRow(new string[] {
                        "hdac",
                        "0",
                        "3",
                        "192"});
#line 61
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Import device info for the HD Core devices")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void ImportDeviceInfoForTheHDCoreDevices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import device info for the HD Core devices", new string[] {
                        "mytag"});
#line 66
this.ScenarioSetup(scenarioInfo);
#line 67
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 68
 testRunner.When("I convert the tuning file Tuning_File_Device_Info_HD_Core.xml to the database DAX" +
                    "2.sdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range"});
            table6.AddRow(new string[] {
                        "hdac_core",
                        "0",
                        "0",
                        "192"});
#line 70
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Import device info for the DSP devices")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void ImportDeviceInfoForTheDSPDevices()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import device info for the DSP devices", new string[] {
                        "mytag"});
#line 75
this.ScenarioSetup(scenarioInfo);
#line 76
 testRunner.Given("I have opened the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 77
 testRunner.When("I convert the tuning file Tuning_File_Device_Info_DSP.xml to the database DAX2.sd" +
                    "f", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
 testRunner.And("I close the DTT conversion tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "SKU_Name",
                        "opp_logo_id",
                        "default_profile",
                        "geq_maximum_range"});
            table7.AddRow(new string[] {
                        "dsp",
                        "0",
                        "0",
                        "192"});
#line 79
 testRunner.Then("I should be able to query below 1 new records in the table Device_Info of the DAX" +
                    "2 DB", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
